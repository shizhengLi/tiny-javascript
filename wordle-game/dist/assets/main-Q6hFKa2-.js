(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(a){if(a.ep)return;a.ep=!0;const i=e(a);fetch(a.href,i)}})();class l{constructor(t=[]){this.wordList=t,this.targetWord="",this.currentGuess="",this.guesses=[],this.maxGuesses=6,this.wordLength=5,this.gameStatus="playing",this.usedLetters=new Set,this.initializeGame()}initializeGame(){this.targetWord=this.selectRandomWord(),this.currentGuess="",this.guesses=[],this.gameStatus="playing",this.usedLetters.clear()}selectRandomWord(){if(this.wordList.length===0)return"WORLD";const t=Math.floor(Math.random()*this.wordList.length);return this.wordList[t].toUpperCase()}addLetter(t){return this.gameStatus!=="playing"?!1:this.currentGuess.length<this.wordLength?(this.currentGuess+=t.toUpperCase(),!0):!1}removeLetter(){return this.gameStatus!=="playing"?!1:this.currentGuess.length>0?(this.currentGuess=this.currentGuess.slice(0,-1),!0):!1}submitGuess(){if(this.gameStatus!=="playing"||this.currentGuess.length!==this.wordLength||!this.isValidWord(this.currentGuess))return!1;const t=this.evaluateGuess(this.currentGuess);return this.guesses.push({word:this.currentGuess,result:t}),this.currentGuess.split("").forEach(e=>{this.usedLetters.add(e)}),this.checkGameStatus(),this.currentGuess="",!0}evaluateGuess(t){const e=new Array(this.wordLength).fill("absent"),s=this.targetWord.split(""),a=t.split("");for(let i=0;i<this.wordLength;i++)a[i]===s[i]&&(e[i]="correct",s[i]=null,a[i]=null);for(let i=0;i<this.wordLength;i++)if(a[i]!==null){const r=s.indexOf(a[i]);r!==-1&&(e[i]="present",s[r]=null)}return e}checkGameStatus(){const t=this.guesses[this.guesses.length-1];t&&t.word===this.targetWord?this.gameStatus="won":this.guesses.length>=this.maxGuesses&&(this.gameStatus="lost")}isValidWord(t){return/^[A-Z]{5}$/.test(t)}getGameState(){return{targetWord:this.targetWord,currentGuess:this.currentGuess,guesses:this.guesses,gameStatus:this.gameStatus,maxGuesses:this.maxGuesses,wordLength:this.wordLength,usedLetters:Array.from(this.usedLetters),remainingGuesses:this.maxGuesses-this.guesses.length}}getLetterStatus(t){const e=t.toUpperCase();for(const s of this.guesses){const a=s.word.indexOf(e);if(a!==-1)return s.result[a]}return"unused"}setWordList(t){this.wordList=t,this.initializeGame()}resetGame(){this.initializeGame()}}class h{constructor(){this.validWords=new Set,this.commonWords=new Set(["ABOUT","ABOVE","ABUSE","ACTOR","ACUTE","ADMIT","ADOPT","ADULT","AFTER","AGAIN","AGENT","AGREE","AHEAD","ALARM","ALBUM","ALERT","ALIEN","ALIGN","ALIVE","ALLOW","ALONE","ALONG","ALTER","ANGEL","ANGER","ANGLE","ANGRY","APART","APPLE","APPLY","ARENA","ARGUE","ARISE","ARRAY","ASIDE","ASSET","AVOID","AWARD","AWARE","BADLY","BAKER","BASES","BASIC","BEACH","BEGAN","BEING","BELOW","BENCH","BILLY","BIRTH","BLACK","BLAME","BLIND","BLOCK","BLOOD","BOARD","BOOST","BOOTH","BOUND","BRAIN","BRAND","BRAVE","BREAD","BREAK","BREED","BRIEF","BRING","BROAD","BROKE","BROWN","BUILD","BUILT","BUYER","CABLE","CALIF","CARRY","CATCH","CAUSE","CHAIN","CHAIR","CHAOS","CHARM","CHART","CHASE","CHEAP","CHECK","CHEST","CHIEF","CHILD","CHINA","CHOSE","CIVIL","CLAIM","CLASS","CLEAN","CLEAR","CLICK","CLIMB","CLOCK","CLOSE","CLOUD","COACH","COAST","COULD","COUNT","COURT","COVER","CRAFT","CRASH","CRAZY","CREAM","CRIME","CROSS","CROWD","CROWN","CRUDE","CURVE","CYCLE","DAILY","DANCE","DATED","DEALT","DEATH","DEBUT","DELAY","DEPTH","DOING","DOUBT","DOZEN","DRAFT","DRAMA","DRANK","DRAWN","DREAM","DRESS","DRILL","DRINK","DRIVE","DROVE","DYING","EAGER","EARLY","EARTH","EIGHT","ELITE","EMPTY","ENEMY","ENJOY","ENTER","ENTRY","EQUAL","ERROR","EVENT","EVERY","EXACT","EXIST","EXTRA","FAITH","FALSE","FAULT","FIBER","FIELD","FIFTH","FIFTY","FIGHT","FINAL","FIRST","FIXED","FLASH","FLEET","FLOOR","FLUID","FOCUS","FORCE","FORTH","FORTY","FORUM","FOUND","FRAME","FRANK","FRAUD","FRESH","FRONT","FRUIT","FULLY","FUNNY","GIANT","GIVEN","GLASS","GLOBE","GOING","GRACE","GRADE","GRAND","GRANT","GRASS","GRAVE","GREAT","GREEN","GROSS","GROUP","GROWN","GUARD","GUESS","GUEST","GUIDE","HAPPY","HARRY","HEART","HEAVY","HELLO","HENRY","HORSE","HOTEL","HOUSE","HUMAN","IDEAL","IMAGE","IMPLY","INDEX","INNER","INPUT","ISSUE","JAPAN","JIMMY","JOINT","JONES","JUDGE","KNOWN","LABEL","LARGE","LASER","LATER","LAUGH","LAYER","LEARN","LEASE","LEAST","LEAVE","LEGAL","LEMON","LEVEL","LEWIS","LIGHT","LIMIT","LINKS","LIVES","LOCAL","LOGIC","LOOSE","LOWER","LUCKY","LUNCH","LYING","MAGIC","MAJOR","MAKER","MARCH","MARIA","MATCH","MAYBE","MAYOR","MEANT","MEDIA","METAL","MIGHT","MINOR","MINUS","MIXED","MODEL","MONEY","MONTH","MORAL","MOTOR","MOUNT","MOUSE","MOUTH","MOVED","MOVIE","MUSIC","NEEDS","NEVER","NEWLY","NIGHT","NOISE","NORTH","NOTED","NOVEL","NURSE","OCCUR","OCEAN","OFFER","OFTEN","ORDER","OTHER","OUGHT","OUTER","OWNER","PAINT","PANEL","PAPER","PARIS","PARTY","PEACE","PENNY","PETER","PHASE","PHONE","PHOTO","PIANO","PIECE","PILOT","PITCH","PLACE","PLAIN","PLANE","PLANT","PLATE","POINT","POUND","POWER","PRESS","PRICE","PRIDE","PRIME","PRINT","PRIOR","PRIZE","PROOF","PROUD","PROVE","QUEEN","QUICK","QUIET","QUITE","RADIO","RAISE","RANGE","RAPID","RATIO","REACH","READY","REALM","REFER","RELAX","REPLY","RIDER","RIDGE","RIFLE","RIGHT","RIGID","RIVER","ROBIN","ROCKY","ROGER","ROMAN","ROUGH","ROUND","ROUTE","ROYAL","RURAL","SCALE","SCENE","SCOPE","SCORE","SENSE","SERVE","SEVEN","SHALL","SHAPE","SHARE","SHARP","SHEET","SHELF","SHELL","SHIFT","SHINE","SHIRT","SHOCK","SHOOT","SHORT","SHOWN","SIGHT","SILLY","SIMON","SINCE","SIXTH","SIXTY","SIZED","SKILL","SLASH","SLEEP","SLIDE","SMALL","SMART","SMILE","SMITH","SMOKE","SOLID","SOLVE","SORRY","SOUND","SOUTH","SPACE","SPARE","SPEAK","SPEED","SPEND","SPENT","SPLIT","SPOKE","SPORT","STAFF","STAGE","STAKE","STAND","START","STATE","STEAM","STEEL","STICK","STILL","STOCK","STONE","STOOD","STORE","STORM","STORY","STRIP","STUCK","STUDY","STUFF","STYLE","SUGAR","SUITE","SUNNY","SUPER","SURGE","SWEET","TABLE","TAKEN","TASTE","TAXES","TEACH","TEETH","TERRY","TEXAS","THANK","THEFT","THEIR","THEME","THERE","THESE","THICK","THING","THINK","THIRD","THOSE","THREE","THREW","THROW","TIGHT","TIMES","TIRED","TITLE","TODAY","TOPIC","TOTAL","TOUCH","TOUGH","TOWER","TRACK","TRADE","TRAIN","TRASH","TREAT","TREND","TRIAL","TRIBE","TRICK","TRIED","TRIES","TROOP","TRUCK","TRULY","TRUST","TRUTH","TWICE","UNDER","UNDUE","UNION","UNITY","UNTIL","UPPER","UPSET","URBAN","USAGE","USUAL","VALID","VALUE","VIDEO","VIRUS","VISIT","VITAL","VOCAL","VOICE","WASTE","WATCH","WATER","WHEEL","WHERE","WHICH","WHILE","WHITE","WHOLE","WHOSE","WOMAN","WOMEN","WORLD","WORRY","WORSE","WORST","WORTH","WOULD","WOUND","WRITE","WRONG","WROTE","YIELD","YOUNG","YOUTH"]),this.commonWords.forEach(t=>this.validWords.add(t))}validateFormat(t){if(!t||typeof t!="string")return{valid:!1,reason:"单词不能为空"};const e=t.toUpperCase();return e.length!==5?{valid:!1,reason:"单词必须是5个字母"}:/^[A-Z]{5}$/.test(e)?{valid:!0,word:e}:{valid:!1,reason:"单词只能包含字母"}}validateWord(t){const e=this.validateFormat(t);if(!e.valid)return e;const s=e.word;return this.validWords.has(s)?{valid:!0,word:s,isCommon:this.commonWords.has(s)}:{valid:!1,reason:"不是有效的英文单词",word:s}}addCustomWord(t){const e=this.validateFormat(t);if(!e.valid)return e;const s=e.word;return this.validWords.add(s),{valid:!0,word:s,message:"单词已添加到验证列表"}}addWordList(t){const e=[];t.forEach(i=>{const r=this.addCustomWord(i);e.push(r)});const s=e.filter(i=>i.valid).length,a=e.length-s;return{successful:s,failed:a,results:e,message:`成功添加 ${s} 个单词，失败 ${a} 个`}}removeWord(t){const e=this.validateFormat(t);if(!e.valid)return e;const s=e.word;return this.validWords.delete(s)?{valid:!0,word:s,message:"单词已从验证列表中移除"}:{valid:!1,word:s,reason:"单词不在验证列表中"}}isValidWord(t){return this.validateWord(t).valid}getSuggestions(t,e=5){if(!t||t.length===0)return[];const s=t.toUpperCase(),a=[];for(const i of this.validWords)if(i.startsWith(s)&&(a.push(i),a.length>=e))break;return a}getRandomWord(){const t=Array.from(this.validWords);if(t.length===0)return null;const e=Math.floor(Math.random()*t.length);return t[e]}getStats(){return{totalWords:this.validWords.size,commonWords:this.commonWords.size,customWords:this.validWords.size-this.commonWords.size,sampleWords:Array.from(this.validWords).slice(0,10)}}reset(){this.validWords.clear(),this.commonWords.forEach(t=>this.validWords.add(t))}exportWords(){return Array.from(this.validWords)}importWords(t){return this.validWords.clear(),this.addWordList(t)}}class E{constructor(){this.state={currentGame:null,gameHistory:[],statistics:{gamesPlayed:0,gamesWon:0,currentStreak:0,maxStreak:0,guessDistribution:[0,0,0,0,0,0]},settings:{hardMode:!1,darkTheme:!1,colorblindMode:!1,animations:!0},achievements:[],lastPlayed:null},this.loadState()}initializeNewGame(t=[]){const e={id:this.generateGameId(),targetWord:this.selectTargetWord(t),currentGuess:"",guesses:[],gameStatus:"playing",maxGuesses:6,wordLength:5,startTime:Date.now(),endTime:null,usedLetters:new Set,wordList:t};return this.state.currentGame=e,this.saveState(),e}generateGameId(){return`game_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}selectTargetWord(t){if(t.length===0)return"WORLD";const e=Math.floor(Math.random()*t.length);return t[e].toUpperCase()}updateCurrentGame(t){if(!this.state.currentGame)throw new Error("没有活动的游戏");return this.state.currentGame={...this.state.currentGame,...t,lastUpdated:Date.now()},this.saveState(),this.state.currentGame}submitGuess(t){if(!this.state.currentGame||this.state.currentGame.gameStatus!=="playing")throw new Error("游戏未在进行中");const e=this.state.currentGame,s=this.evaluateGuess(t,e.targetWord);return e.guesses.push({word:t,result:s,timestamp:Date.now()}),t.split("").forEach(a=>{e.usedLetters.add(a)}),e.currentGuess="",this.checkGameStatus(e),e.gameStatus!=="playing"&&this.finalizeGame(e),this.saveState(),e}evaluateGuess(t,e){const s=new Array(5).fill("absent"),a=e.split(""),i=t.split("");for(let r=0;r<5;r++)i[r]===a[r]&&(s[r]="correct",a[r]=null,i[r]=null);for(let r=0;r<5;r++)if(i[r]!==null){const o=a.indexOf(i[r]);o!==-1&&(s[r]="present",a[o]=null)}return s}checkGameStatus(t){const e=t.guesses[t.guesses.length-1];e&&e.word===t.targetWord?(t.gameStatus="won",t.endTime=Date.now()):t.guesses.length>=t.maxGuesses&&(t.gameStatus="lost",t.endTime=Date.now())}finalizeGame(t){const e=this.state.statistics;if(e.gamesPlayed++,t.gameStatus==="won"){e.gamesWon++,e.currentStreak++,e.maxStreak=Math.max(e.maxStreak,e.currentStreak);const s=t.guesses.length;s>=1&&s<=6&&e.guessDistribution[s-1]++}else e.currentStreak=0;this.state.gameHistory.unshift({id:t.id,targetWord:t.targetWord,gameStatus:t.gameStatus,guessCount:t.guesses.length,duration:t.endTime-t.startTime,date:new Date().toISOString().split("T")[0],completedAt:t.endTime}),this.checkAchievements(t),this.state.lastPlayed=Date.now(),this.saveState()}checkAchievements(t){const e=this.state.statistics,s=[];e.gamesWon===1&&!this.hasAchievement("first_win")&&s.push({id:"first_win",name:"首次获胜",description:"完成你的第一个Wordle游戏",icon:"🎉",unlockedAt:Date.now()}),e.currentStreak>=5&&!this.hasAchievement("streak_master")&&s.push({id:"streak_master",name:"连胜大师",description:"连续赢得5场游戏",icon:"🔥",unlockedAt:Date.now()}),t.gameStatus==="won"&&t.guesses.length===1&&!this.hasAchievement("perfect_game")&&s.push({id:"perfect_game",name:"完美游戏",description:"一次就猜中目标单词",icon:"💯",unlockedAt:Date.now()}),e.gamesPlayed>=10&&!this.hasAchievement("word_master")&&s.push({id:"word_master",name:"词汇大师",description:"完成10场游戏",icon:"📚",unlockedAt:Date.now()}),s.forEach(a=>{this.state.achievements.push(a)})}hasAchievement(t){return this.state.achievements.some(e=>e.id===t)}getCurrentGame(){return this.state.currentGame}getStatistics(){const t=this.state.statistics;return{...t,winPercentage:t.gamesPlayed>0?Math.round(t.gamesWon/t.gamesPlayed*100):0,averageGuesses:this.calculateAverageGuesses()}}calculateAverageGuesses(){const t=this.state.gameHistory.filter(s=>s.gameStatus==="won");return t.length===0?0:(t.reduce((s,a)=>s+a.guessCount,0)/t.length).toFixed(1)}getSettings(){return{...this.state.settings}}updateSettings(t){return this.state.settings={...this.state.settings,...t},this.saveState(),this.state.settings}getAchievements(){return[...this.state.achievements]}getGameHistory(t=10){return this.state.gameHistory.slice(0,t)}resetStatistics(){this.state.statistics={gamesPlayed:0,gamesWon:0,currentStreak:0,maxStreak:0,guessDistribution:[0,0,0,0,0,0]},this.state.achievements=[],this.saveState()}resetAll(){this.state={currentGame:null,gameHistory:[],statistics:{gamesPlayed:0,gamesWon:0,currentStreak:0,maxStreak:0,guessDistribution:[0,0,0,0,0,0]},settings:{hardMode:!1,darkTheme:!1,colorblindMode:!1,animations:!0},achievements:[],lastPlayed:null},this.saveState()}saveState(){try{const t=JSON.stringify(this.state,(e,s)=>s instanceof Set?{__type__:"Set",values:Array.from(s)}:s);localStorage.setItem("wordleGameState",t)}catch(t){console.error("保存游戏状态失败:",t)}}loadState(){try{const t=localStorage.getItem("wordleGameState");if(t){const e=JSON.parse(t,(s,a)=>a&&a.__type__==="Set"?new Set(a.values):a);this.isValidState(e)&&(this.state=e,this.state.currentGame&&!this.state.currentGame.usedLetters&&(this.state.currentGame.usedLetters=new Set))}}catch(t){console.error("加载游戏状态失败:",t)}}isValidState(t){return t&&typeof t=="object"&&"statistics"in t&&"settings"in t&&"achievements"in t}exportState(){return JSON.stringify(this.state)}importState(t){try{const e=JSON.parse(t);return this.isValidState(e)?(this.state=e,this.saveState(),!0):!1}catch(e){return console.error("导入状态失败:",e),!1}}cleanupOldData(t=30){const e=new Date;e.setDate(e.getDate()-t),this.state.gameHistory=this.state.gameHistory.filter(s=>new Date(s.completedAt)>e),this.saveState()}}class c{constructor(t,e={}){this.container=t,this.options={maxGuesses:6,wordLength:5,animations:!0,...e},this.boardElement=null,this.rows=[],this.currentRow=0,this.currentCol=0,this.init()}init(){this.createBoard(),this.bindEvents()}createBoard(){this.boardElement=document.createElement("div"),this.boardElement.className="game-board";for(let t=0;t<this.options.maxGuesses;t++){const e=this.createRow(t);this.boardElement.appendChild(e),this.rows.push(e)}this.container.appendChild(this.boardElement)}createRow(t){const e=document.createElement("div");e.className="game-row",e.dataset.row=t;for(let s=0;s<this.options.wordLength;s++){const a=this.createTile(t,s);e.appendChild(a)}return e}createTile(t,e){const s=document.createElement("div");return s.className="game-tile",s.dataset.row=t,s.dataset.col=e,s.textContent="",s}bindEvents(){document.addEventListener("keydown",t=>this.handleKeyDown(t)),"ontouchstart"in window&&this.boardElement.addEventListener("touchstart",t=>this.handleTouchStart(t))}handleKeyDown(t){this.onKeyPress&&this.onKeyPress(t)}handleTouchStart(t){t.preventDefault()}addLetter(t){if(this.currentCol<this.options.wordLength){const e=this.getTile(this.currentRow,this.currentCol);if(e)return e.textContent=t.toUpperCase(),this.options.animations&&(e.classList.add("pop"),setTimeout(()=>e.classList.remove("pop"),100)),this.currentCol++,!0}return!1}removeLetter(){if(this.currentCol>0){this.currentCol--;const t=this.getTile(this.currentRow,this.currentCol);if(t)return t.textContent="",this.options.animations&&(t.classList.add("shake"),setTimeout(()=>t.classList.remove("shake"),300)),!0}return!1}submitRow(){if(this.currentCol===this.options.wordLength){const t=this.getCurrentWord();return this.clearCurrentRow(),t}return null}getCurrentWord(){let t="";for(let e=0;e<this.options.wordLength;e++){const s=this.getTile(this.currentRow,e);t+=s.textContent}return t}clearCurrentRow(){for(let t=0;t<this.options.wordLength;t++){const e=this.getTile(this.currentRow,t);e.textContent="",e.className="game-tile"}this.currentRow++,this.currentCol=0}showGuessResult(t,e,s){const a=this.rows[t];if(!a)return;const i=a.querySelectorAll(".game-tile");e.forEach((r,o)=>{setTimeout(()=>{const d=i[o];d&&(d.classList.add("revealed",r),d.textContent=s[o])},o*100)}),e.every(r=>r==="absent")&&setTimeout(()=>{a.classList.add("shake"),setTimeout(()=>a.classList.remove("shake"),500)},e.length*100+200)}showError(t){const e=this.rows[this.currentRow];e&&(e.classList.add("shake"),setTimeout(()=>e.classList.remove("shake"),500));const s=document.createElement("div");s.className="toast error",s.textContent=t,document.body.appendChild(s),setTimeout(()=>{s.classList.add("show"),setTimeout(()=>{s.classList.remove("show"),setTimeout(()=>document.body.removeChild(s),300)},2e3)},10)}showSuccess(t){const e=document.createElement("div");e.className="toast success",e.textContent=t,document.body.appendChild(e),setTimeout(()=>{e.classList.add("show"),setTimeout(()=>{e.classList.remove("show"),setTimeout(()=>document.body.removeChild(e),300)},2e3)},10)}getTile(t,e){const s=this.rows[t];return s?s.querySelector(`[data-col="${e}"]`):null}reset(){this.currentRow=0,this.currentCol=0,this.rows.forEach((t,e)=>{t.querySelectorAll(".game-tile").forEach((a,i)=>{a.textContent="",a.className="game-tile",a.dataset.row=e,a.dataset.col=i}),t.className="game-row"})}setOnKeyPress(t){this.onKeyPress=t}setEnabled(t){this.boardElement.style.pointerEvents=t?"auto":"none",this.boardElement.classList.toggle("disabled",!t)}getCurrentPosition(){return{row:this.currentRow,col:this.currentCol}}focus(){this.boardElement.focus()}destroy(){document.removeEventListener("keydown",this.handleKeyDown),this.boardElement&&this.boardElement.parentNode&&this.boardElement.parentNode.removeChild(this.boardElement)}}class u{constructor(t,e={}){this.container=t,this.options={layout:"qwerty",onClick:null,letterStates:new Map,...e},this.keyboardElement=null,this.keys=new Map,this.layouts={qwerty:[["Q","W","E","R","T","Y","U","I","O","P"],["A","S","D","F","G","H","J","K","L"],["ENTER","Z","X","C","V","B","N","M","BACK"]]},this.init()}init(){this.createKeyboard(),this.bindEvents()}createKeyboard(){this.keyboardElement=document.createElement("div"),this.keyboardElement.className="keyboard",this.layouts[this.options.layout].forEach((e,s)=>{const a=document.createElement("div");a.className="keyboard-row",e.forEach(i=>{const r=this.createKey(i,s);a.appendChild(r),this.keys.set(i,r)}),this.keyboardElement.appendChild(a)}),this.container.appendChild(this.keyboardElement)}createKey(t,e){const s=document.createElement("button");s.className="key",s.dataset.key=t,s.textContent=this.getKeyDisplay(t),(t==="ENTER"||t==="BACK")&&s.classList.add("key-wide");const a=this.options.letterStates.get(t);return a&&s.classList.add(a),s}getKeyDisplay(t){switch(t){case"BACK":return"⌫";case"ENTER":return"ENTER";default:return t}}bindEvents(){this.keyboardElement.addEventListener("click",t=>{t.target.classList.contains("key")&&this.handleKeyClick(t.target.dataset.key)}),document.addEventListener("keydown",t=>this.handlePhysicalKey(t))}handleKeyClick(t){this.options.onClick&&this.options.onClick(t);const e=this.keys.get(t);e&&(e.classList.add("pressed"),setTimeout(()=>e.classList.remove("pressed"),100))}handlePhysicalKey(t){let e=null;t.key==="Enter"?e="ENTER":t.key==="Backspace"?e="BACK":t.key.match(/^[a-zA-Z]$/)&&(e=t.key.toUpperCase()),e&&this.keys.has(e)&&(this.handleKeyClick(e),t.preventDefault())}updateKeyState(t,e){const s=this.keys.get(t.toUpperCase());s&&(s.classList.remove("correct","present","absent"),e!=="unused"&&s.classList.add(e),this.options.letterStates.set(t.toUpperCase(),e))}updateKeyStates(t){t.forEach((e,s)=>{this.updateKeyState(s,e)})}getKeyState(t){return this.options.letterStates.get(t.toUpperCase())||"unused"}setOnClick(t){this.options.onClick=t}setEnabled(t){this.keyboardElement.classList.toggle("disabled",!t),this.keys.forEach(e=>{e.disabled=!t})}highlightKey(t,e=!0){const s=this.keys.get(t);s&&s.classList.toggle("highlight",e)}getAllKeyStates(){const t={};return this.options.letterStates.forEach((e,s)=>{t[s]=e}),t}reset(){this.options.letterStates.clear(),this.keys.forEach(t=>{t.className="key",(t.dataset.key==="ENTER"||t.dataset.key==="BACK")&&t.classList.add("key-wide")})}setLayout(t){this.layouts[t]&&(this.options.layout=t,this.rebuildKeyboard())}rebuildKeyboard(){this.keyboardElement&&this.keyboardElement.parentNode&&this.keyboardElement.parentNode.removeChild(this.keyboardElement),this.keys.clear(),this.createKeyboard()}getElement(){return this.keyboardElement}focus(){this.keyboardElement.focus()}destroy(){document.removeEventListener("keydown",this.handlePhysicalKey),this.keyboardElement&&this.keyboardElement.parentNode&&this.keyboardElement.parentNode.removeChild(this.keyboardElement),this.keys.clear()}}class m{constructor(t,e={}){this.container=t,this.options={showDetails:!0,animations:!0,...e},this.statsElement=null,this.modalElement=null,this.init()}init(){this.createStatsElement(),this.bindEvents()}createStatsElement(){this.statsElement=document.createElement("div"),this.statsElement.className="game-stats",this.container.appendChild(this.statsElement)}bindEvents(){}updateStats(t){const e=t.gamesPlayed>0?Math.round(t.gamesWon/t.gamesPlayed*100):0,s=t.currentStreak||0,a=t.maxStreak||0;this.statsElement.innerHTML=`
      <div class="stats-summary">
        <div class="stat-item">
          <div class="stat-number">${t.gamesPlayed}</div>
          <div class="stat-label">游戏次数</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${e}%</div>
          <div class="stat-label">胜率</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${s}</div>
          <div class="stat-label">当前连胜</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${a}</div>
          <div class="stat-label">最高连胜</div>
        </div>
      </div>
    `,this.options.animations&&this.animateStats()}animateStats(){this.statsElement.querySelectorAll(".stat-number").forEach((e,s)=>{setTimeout(()=>{e.classList.add("animate")},s*100)})}showDetailedStats(t){this.modalElement&&this.closeModal(),this.modalElement=document.createElement("div"),this.modalElement.className="modal stats-modal";const e=t.gamesPlayed>0?Math.round(t.gamesWon/t.gamesPlayed*100):0,s=Math.max(...t.guessDistribution),a=200;this.modalElement.innerHTML=`
      <div class="modal-content">
        <div class="modal-header">
          <h2>游戏统计</h2>
          <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
        </div>

        <div class="modal-body">
          <div class="stats-grid">
            <div class="stats-overview">
              <div class="overview-stat">
                <div class="big-number">${t.gamesPlayed}</div>
                <div class="big-label">游戏次数</div>
              </div>
              <div class="overview-stat">
                <div class="big-number">${e}%</div>
                <div class="big-label">胜率</div>
              </div>
              <div class="overview-stat">
                <div class="big-number">${t.currentStreak}</div>
                <div class="big-label">当前连胜</div>
              </div>
              <div class="overview-stat">
                <div class="big-number">${t.maxStreak}</div>
                <div class="big-label">最高连胜</div>
              </div>
            </div>

            <div class="guess-distribution">
              <h3>猜测分布</h3>
              <div class="distribution-bars">
                ${t.guessDistribution.map((i,r)=>{const o=i/s*a;return`
                    <div class="distribution-row">
                      <div class="guess-number">${r+1}</div>
                      <div class="bar-container">
                        <div class="bar" style="width: ${o}px">
                          <span class="count">${i}</span>
                        </div>
                      </div>
                    </div>
                  `}).join("")}
              </div>
            </div>

            <div class="stats-achievements">
              <h3>成就</h3>
              <div class="achievements-grid">
                ${this.generateAchievementsHTML(t.achievements||[])}
              </div>
            </div>
          </div>
        </div>
      </div>
    `,document.body.appendChild(this.modalElement),setTimeout(()=>{this.modalElement.classList.add("show")},10),this.modalElement.addEventListener("click",i=>{i.target===this.modalElement&&this.closeModal()})}generateAchievementsHTML(t){return t.length===0?'<div class="no-achievements">还没有解锁成就</div>':t.map(e=>`
      <div class="achievement-item ${e.unlocked?"unlocked":"locked"}">
        <div class="achievement-icon">${e.icon||"🏆"}</div>
        <div class="achievement-info">
          <div class="achievement-name">${e.name}</div>
          <div class="achievement-description">${e.description}</div>
          ${e.unlockedAt?`
            <div class="achievement-date">
              解锁于 ${new Date(e.unlockedAt).toLocaleDateString()}
            </div>
          `:""}
        </div>
      </div>
    `).join("")}closeModal(){this.modalElement&&(this.modalElement.classList.remove("show"),setTimeout(()=>{this.modalElement&&this.modalElement.parentNode&&(this.modalElement.parentNode.removeChild(this.modalElement),this.modalElement=null)},300))}showShareHint(){const t=document.createElement("div");t.className="toast share-hint",t.innerHTML=`
      <div class="toast-content">
        <span>🎉 游戏完成！</span>
        <button class="share-btn">分享结果</button>
      </div>
    `,document.body.appendChild(t),t.querySelector(".share-btn").addEventListener("click",()=>{this.shareResults(),document.body.removeChild(t)}),setTimeout(()=>{t.classList.add("show")},10),setTimeout(()=>{t.parentNode&&(t.classList.remove("show"),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},300))},5e3)}shareResults(){const t=this.generateShareText();navigator.share?navigator.share({title:"Wordle 游戏结果",text:t}).catch(e=>console.log("分享失败:",e)):navigator.clipboard.writeText(t).then(()=>{this.showToast("结果已复制到剪贴板！")}).catch(e=>{console.log("复制失败:",e),this.showToast("分享失败，请手动复制")})}generateShareText(){const t=new Date().toLocaleDateString(),e=["⬛","🟨","🟩"];return`Wordle ${t}

${e[0]}${e[1]}${e[0]}${e[0]}${e[0]}
${e[0]}${e[0]}${e[1]}${e[0]}${e[0]}
${e[2]}${e[2]}${e[2]}${e[2]}${e[2]}

🎉 游戏完成！`}showToast(t,e="info"){const s=document.createElement("div");s.className=`toast ${e}`,s.textContent=t,document.body.appendChild(s),setTimeout(()=>{s.classList.add("show"),setTimeout(()=>{s.classList.remove("show"),setTimeout(()=>{s.parentNode&&document.body.removeChild(s)},300)},2e3)},10)}setOptions(t){this.options={...this.options,...t}}getElement(){return this.statsElement}destroy(){this.closeModal(),this.statsElement&&this.statsElement.parentNode&&this.statsElement.parentNode.removeChild(this.statsElement)}}class A{constructor(t={}){this.options={wordList:[],container:document.body,...t},this.game=null,this.validator=null,this.stateManager=null,this.board=null,this.keyboard=null,this.stats=null,this.gameBoard=null,this.keyboardContainer=null,this.statsContainer=null,this.statusElement=null,this.gameOverModal=null,this.init()}init(){this.createDOMStructure(),this.initializeComponents(),this.setupEventListeners(),this.startNewGame()}createDOMStructure(){this.gameBoard=this.options.container.querySelector("#game-board"),this.keyboardContainer=this.options.container.querySelector("#keyboard"),this.statsContainer=this.options.container.querySelector(".game-info"),this.statusElement=this.options.container.querySelector("#game-status"),this.gameOverModal=this.options.container.querySelector("#game-over-modal"),this.gameBoard||(this.gameBoard=document.createElement("div"),this.gameBoard.id="game-board",this.gameBoard.className="game-board",this.options.container.appendChild(this.gameBoard)),this.keyboardContainer||(this.keyboardContainer=document.createElement("div"),this.keyboardContainer.id="keyboard",this.keyboardContainer.className="keyboard",this.options.container.appendChild(this.keyboardContainer))}initializeComponents(){this.validator=new h,this.stateManager=new E,this.board=new c(this.gameBoard,{animations:!0,maxGuesses:6,wordLength:5}),this.keyboard=new u(this.keyboardContainer,{onClick:t=>this.handleKeyPress(t)}),this.statsContainer&&(this.stats=new m(this.statsContainer)),this.board.setOnKeyPress(t=>{t.key.match(/^[a-zA-Z]$/)?this.handleKeyPress(t.key.toUpperCase()):t.key==="Enter"?this.handleKeyPress("ENTER"):t.key==="Backspace"&&this.handleKeyPress("BACK")})}setupEventListeners(){const t=this.options.container.querySelector("#new-game-btn");t&&t.addEventListener("click",()=>this.startNewGame());const e=this.options.container.querySelector("#hint-btn");e&&e.addEventListener("click",()=>this.showHint());const s=this.options.container.querySelector("#play-again-btn");s&&s.addEventListener("click",()=>{this.hideGameOverModal(),this.startNewGame()}),this.stats&&this.stats.getElement().addEventListener("click",()=>{this.showDetailedStats()})}startNewGame(){const t=this.validator.exportWords().slice(0,100),e=this.stateManager.initializeNewGame(t);this.game=new l(t),this.game.targetWord=e.targetWord,this.board.reset(),this.keyboard.reset(),this.updateStatus("输入5个字母的单词"),this.stats&&this.stats.updateStats(this.stateManager.getStatistics()),this.setInputEnabled(!0)}handleKeyPress(t){if(!(!this.game||this.game.gameStatus!=="playing"))switch(t){case"BACK":this.handleBackspace();break;case"ENTER":this.handleSubmit();break;default:this.handleLetter(t);break}}handleLetter(t){this.game.addLetter(t)&&(this.board.addLetter(t),this.updateStatus(`输入第 ${this.game.currentGuess.length}/5 个字母`))}handleBackspace(){this.game.removeLetter()&&(this.board.removeLetter(),this.updateStatus(`输入第 ${this.game.currentGuess.length}/5 个字母`))}clearCurrentGuess(){for(;this.game.currentGuess.length>0;)this.game.removeLetter(),this.board.removeLetter();this.updateStatus("输入5个字母的单词")}handleSubmit(){if(this.game.currentGuess.length!==5){this.board.showError("请输入5个字母");return}const t=this.game.currentGuess,e=this.validator.validateWord(t);if(!e.valid){this.board.showError(e.reason||"不是有效的单词"),this.clearCurrentGuess();return}if(!this.game.submitGuess(t)){this.board.showError("提交失败");return}this.stateManager.submitGuess(t);const a=this.game.guesses.length-1,i=this.game.evaluateGuess(t,this.game.targetWord);this.board.showGuessResult(a,i,t),this.updateKeyboardState(t,i),this.checkGameEnd()}updateKeyboardState(t,e){for(let s=0;s<t.length;s++){const a=t[s],i=this.keyboard.getKeyState(a),r=e[s];this.shouldUpdateKeyState(i,r)&&this.keyboard.updateKeyState(a,r)}}shouldUpdateKeyState(t,e){return e==="correct"||e==="present"&&t!=="correct"||e==="absent"&&t==="unused"}checkGameEnd(){this.game.gameStatus==="won"?this.handleGameWon():this.game.gameStatus==="lost"?this.handleGameLost():this.updateStatus(`还剩 ${this.game.maxGuesses-this.game.guesses.length} 次机会`)}handleGameWon(){this.updateStatus("🎉 恭喜你赢了！"),this.setInputEnabled(!1),setTimeout(()=>{this.showGameOverModal(!0),this.stats&&this.stats.showShareHint()},1500),this.stats&&this.stats.updateStats(this.stateManager.getStatistics())}handleGameLost(){this.updateStatus(`😔 游戏结束，答案是 ${this.game.targetWord}`),this.setInputEnabled(!1),setTimeout(()=>{this.showGameOverModal(!1)},1e3),this.stats&&this.stats.updateStats(this.stateManager.getStatistics())}showGameOverModal(t){if(!this.gameOverModal)return;const e=this.gameOverModal.querySelector("#game-result"),s=this.gameOverModal.querySelector("#correct-word");e&&(e.textContent=t?"🎉 恭喜获胜！":"😔 游戏结束"),s&&(s.textContent=t?"你太厉害了！":`答案是：${this.game.targetWord}`),this.gameOverModal.classList.remove("hidden")}hideGameOverModal(){this.gameOverModal&&this.gameOverModal.classList.add("hidden")}showDetailedStats(){this.stats&&this.stats.showDetailedStats(this.stateManager.getStatistics())}showHint(){if(!this.game||this.game.gameStatus!=="playing")return;const t=this.game.targetWord,e=[];for(let s=0;s<t.length;s++){const a=t[s];if(this.keyboard.getKeyState(a)==="unused"){e.push(`第 ${s+1} 个字母是 ${a}`);break}}e.length>0?this.board.showSuccess(e[0]):this.board.showSuccess("没有更多提示了！")}updateStatus(t){this.statusElement&&(this.statusElement.textContent=t)}setInputEnabled(t){this.board.setEnabled(t),this.keyboard.setEnabled(t)}getGameState(){return{game:this.game?this.game.getGameState():null,statistics:this.stateManager.getStatistics(),settings:this.stateManager.getSettings()}}updateSettings(t){this.stateManager.updateSettings(t),t.darkTheme!==void 0&&document.body.classList.toggle("dark-theme",t.darkTheme),t.animations!==void 0&&(this.board.options.animations=t.animations)}reset(){this.stateManager.resetAll(),this.startNewGame()}destroy(){this.board&&this.board.destroy(),this.keyboard&&this.keyboard.destroy(),this.stats&&this.stats.destroy(),this.removeEventListeners()}removeEventListeners(){const t=this.options.container.querySelector("#new-game-btn");t&&t.removeEventListener("click",this.startNewGame);const e=this.options.container.querySelector("#hint-btn");e&&e.removeEventListener("click",this.showHint)}}class R{constructor(){this.controller=null,this.init()}init(){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>this.startApp()):this.startApp()}startApp(){try{this.controller=new A({container:document.body,wordList:this.getDefaultWordList()}),window.addEventListener("error",t=>{console.error("游戏错误:",t.error),this.showError("游戏出现错误，请刷新页面重试")}),window.addEventListener("unhandledrejection",t=>{console.error("未处理的Promise拒绝:",t.reason),this.showError("游戏出现错误，请刷新页面重试")}),console.log("🎮 Wordle游戏已启动")}catch(t){console.error("启动游戏失败:",t),this.showError("无法启动游戏，请刷新页面重试")}}getDefaultWordList(){return["ABOUT","ABOVE","ABUSE","ACTOR","ACUTE","ADMIT","ADOPT","ADULT","AFTER","AGAIN","AGENT","AGREE","AHEAD","ALARM","ALBUM","ALERT","ALIEN","ALIGN","ALIVE","ALLOW","ALONE","ALONG","ALTER","ANGEL","ANGER","ANGLE","ANGRY","APART","APPLE","APPLY","ARENA","ARGUE","ARISE","ARRAY","ASIDE","ASSET","AVOID","AWARD","AWARE","BADLY","BAKER","BASES","BASIC","BEACH","BEGAN","BEING","BELOW","BENCH","BILLY","BIRTH","BLACK","BLAME","BLIND","BLOCK","BLOOD","BOARD","BOOST","BOOTH","BOUND","BRAIN","BRAND","BRAVE","BREAD","BREAK","BREED","BRIEF","BRING","BROAD","BROKE","BROWN","BUILD","BUILT","BUYER","CABLE","CALIF","CARRY","CATCH","CAUSE","CHAIN","CHAIR","CHAOS","CHARM","CHART","CHASE","CHEAP","CHECK","CHEST","CHIEF","CHILD","CHINA","CHOSE","CIVIL","CLAIM","CLASS","CLEAN","CLEAR","CLICK","CLIMB","CLOCK","CLOSE","CLOUD","COACH","COAST","COULD","COUNT","COURT","COVER","CRAFT","CRASH","CRAZY","CREAM","CRIME","CROSS","CROWD","CROWN","CRUDE","CURVE","CYCLE","DAILY","DANCE","DATED","DEALT","DEATH","DEBUT","DELAY","DEPTH","DOING","DOUBT","DOZEN","DRAFT","DRAMA","DRANK","DRAWN","DREAM","DRESS","DRILL","DRINK","DRIVE","DROVE","DYING","EAGER","EARLY","EARTH","EIGHT","ELITE","EMPTY","ENEMY","ENJOY","ENTER","ENTRY","EQUAL","ERROR","EVENT","EVERY","EXACT","EXIST","EXTRA","FAITH","FALSE","FAULT","FIBER","FIELD","FIFTH","FIFTY","FIGHT","FINAL","FIRST","FIXED","FLASH","FLEET","FLOOR","FLUID","FOCUS","FORCE","FORTH","FORTY","FORUM","FOUND","FRAME","FRANK","FRAUD","FRESH","FRONT","FRUIT","FULLY","FUNNY","GIANT","GIVEN","GLASS","GLOBE","GOING","GRACE","GRADE","GRAND","GRANT","GRASS","GRAVE","GREAT","GREEN","GROSS","GROUP","GROWN","GUARD","GUESS","GUEST","GUIDE","HAPPY","HARRY","HEART","HEAVY","HELLO","HENRY","HORSE","HOTEL","HOUSE","HUMAN","IDEAL","IMAGE","IMPLY","INDEX","INNER","INPUT","ISSUE","JAPAN","JIMMY","JOINT","JONES","JUDGE","KNOWN","LABEL","LARGE","LASER","LATER","LAUGH","LAYER","LEARN","LEASE","LEAST","LEAVE","LEGAL","LEMON","LEVEL","LEWIS","LIGHT","LIMIT","LINKS","LIVES","LOCAL","LOGIC","LOOSE","LOWER","LUCKY","LUNCH","LYING","MAGIC","MAJOR","MAKER","MARCH","MARIA","MATCH","MAYBE","MAYOR","MEANT","MEDIA","METAL","MIGHT","MINOR","MINUS","MIXED","MODEL","MONEY","MONTH","MORAL","MOTOR","MOUNT","MOUSE","MOUTH","MOVED","MOVIE","MUSIC","NEEDS","NEVER","NEWLY","NIGHT","NOISE","NORTH","NOTED","NOVEL","NURSE","OCCUR","OCEAN","OFFER","OFTEN","ORDER","OTHER","OUGHT","OUTER","OWNER","PAINT","PANEL","PAPER","PARIS","PARTY","PEACE","PENNY","PETER","PHASE","PHONE","PHOTO","PIANO","PIECE","PILOT","PITCH","PLACE","PLAIN","PLANE","PLANT","PLATE","POINT","POUND","POWER","PRESS","PRICE","PRIDE","PRIME","PRINT","PRIOR","PRIZE","PROOF","PROUD","PROVE","QUEEN","QUICK","QUIET","QUITE","RADIO","RAISE","RANGE","RAPID","RATIO","REACH","READY","REALM","REFER","RELAX","REPLY","RIDER","RIDGE","RIFLE","RIGHT","RIGID","RIVER","ROBIN","ROCKY","ROGER","ROMAN","ROUGH","ROUND","ROUTE","ROYAL","RURAL","SCALE","SCENE","SCOPE","SCORE","SENSE","SERVE","SEVEN","SHALL","SHAPE","SHARE","SHARP","SHEET","SHELF","SHELL","SHIFT","SHINE","SHIRT","SHOCK","SHOOT","SHORT","SHOWN","SIGHT","SILLY","SIMON","SINCE","SIXTH","SIXTY","SIZED","SKILL","SLASH","SLEEP","SLIDE","SMALL","SMART","SMILE","SMITH","SMOKE","SOLID","SOLVE","SORRY","SOUND","SOUTH","SPACE","SPARE","SPEAK","SPEED","SPEND","SPENT","SPLIT","SPOKE","SPORT","STAFF","STAGE","STAKE","STAND","START","STATE","STEAM","STEEL","STICK","STILL","STOCK","STONE","STOOD","STORE","STORM","STORY","STRIP","STUCK","STUDY","STUFF","STYLE","SUGAR","SUITE","SUNNY","SUPER","SURGE","SWEET","TABLE","TAKEN","TASTE","TAXES","TEACH","TEETH","TERRY","TEXAS","THANK","THEFT","THEIR","THEME","THERE","THESE","THICK","THING","THINK","THIRD","THOSE","THREE","THREW","THROW","TIGHT","TIMES","TIRED","TITLE","TODAY","TOPIC","TOTAL","TOUCH","TOUGH","TOWER","TRACK","TRADE","TRAIN","TRASH","TREAT","TREND","TRIAL","TRIBE","TRICK","TRIED","TRIES","TROOP","TRUCK","TRULY","TRUST","TRUTH","TWICE","UNDER","UNDUE","UNION","UNITY","UNTIL","UPPER","UPSET","URBAN","USAGE","USUAL","VALID","VALUE","VIDEO","VIRUS","VISIT","VITAL","VOCAL","VOICE","WASTE","WATCH","WATER","WHEEL","WHERE","WHICH","WHILE","WHITE","WHOLE","WHOSE","WOMAN","WOMEN","WORLD","WORRY","WORSE","WORST","WORTH","WOULD","WOUND","WRITE","WRONG","WROTE","YIELD","YOUNG","YOUTH"]}showError(t){const e=document.createElement("div");e.className="error-toast",e.textContent=t,e.style.cssText=`
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: #f44336;
      color: white;
      padding: 12px 24px;
      border-radius: 4px;
      z-index: 10000;
      font-family: Arial, sans-serif;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    `,document.body.appendChild(e),setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},3e3)}destroy(){this.controller&&(this.controller.destroy(),this.controller=null)}}new R;
